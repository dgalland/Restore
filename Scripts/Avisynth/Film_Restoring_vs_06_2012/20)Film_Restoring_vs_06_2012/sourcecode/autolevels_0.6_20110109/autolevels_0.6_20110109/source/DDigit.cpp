/*
		This program is free software; you can redistribute it and/or modify
		it under the terms of the GNU General Public License as published by
		the Free Software Foundation.

		This program is distributed in the hope that it will be useful,
		but WITHOUT ANY WARRANTY; without even the implied warranty of
		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		GNU General Public License for more details.

		You should have received a copy of the GNU General Public License
		along with this program; if not, write to the Free Software
		Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

*/

// Original IT0051 by thejam79
// Borrowed from the author of IT.dll, whose name I
// could not determine. Modified for YV12 by Donald Graft.
// RGB32 Added by Klaus Post
// Converted to generic planar, and now using exact coordinates - NOT character coordinates by Klaus Post
// TO DO: Clean up - and move functions to a .c file.
// TO DO: Check coordinates for out-of-image writes.
// Added color support by Violao
// --------------------------------------------------
// Mods by StainlessS:
// Rename to DDigit:-
// Minor mods, Bounds Checking, Comments Added, DDigit files split, by StainlessS (SJ)
// Fixed bug in RGB routines, (Used Height instead of Height-1, for top line).
// Added Text color by index,
//
// SJ, 25 March 2010
// Removed DDigitxxxx character printing functions,using internal character font index.
//   Assumes knowledge of internal font.
// Moved character -> font index conversion to DDigitIX_xxxx instead of in calling stubs,
//   Assumes knowledge of internal font Any client stubs  must call DDigitIX with
//   EXT ASCII so no more using *s - ' ', Use just plain *s instead.
// Added built in vertical string printing functions, top down.
//
// SJ, 20 May 2010
// New colors chosen, better in YV12.
//   Completly changed whole lot. now single basic lo level function DDigitS() which
// does everything, pixel/character coords, horizontal/vertical string printing instead
// of single characters, also color by index. If additional color spaces added, then
// the mods should only need doing in the low level DDigitS() and not in any stubs.
// Like this much better. Also, YV12 routine partly ready for eg Y8 and other planar
// formats, if I knew what way to check for them.
// SJ, 17 Sept 2010, first Release of major mod.
// --------------------------------------------------


#include "DDigit.h"

const unsigned short DDigitFont[DDIGIT_CHARACTERS][DDIGIT_CHAR_HEIGHT] = {	// SJ, Name Change
	//STARTCHAR space 32
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ! 33
	{
		0x0000,0x0000,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0000,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR " 34
	{
		0x0000,0x0000,0x3300,0x3300,
		0x3300,0x1200,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR # 35
	{
		0x0000,0x0000,0x0000,0x0d80,
		0x0d80,0x0d80,0x3fc0,0x1b00,
		0x1b00,0x1b00,0x7f80,0x3600,
		0x3600,0x3600,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR $ 36
	{
		0x0000,0x0000,0x0c00,0x3f00,
		0x6d80,0x6c00,0x6c00,0x6c00,
		0x3f00,0x0d80,0x0d80,0x0d80,
		0x6d80,0x3f00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR % 37
	{
		0x0000,0x0000,0x0000,0x3980,
		0x6d80,0x6f00,0x3b00,0x0600,
		0x0600,0x0c00,0x0c00,0x1b80,
		0x1ec0,0x36c0,0x3380,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR & 38
	{
		0x0000,0x0000,0x1c00,0x3600,
		0x3600,0x3600,0x3c00,0x1800,
		0x3800,0x6c00,0x66c0,0x6380,
		0x6300,0x7780,0x3cc0,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ' 39
	{
		0x0000,0x0000,0x0f00,0x0e00,
		0x1800,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ( 40
	{
		0x0000,0x0000,0x0300,0x0600,
		0x0c00,0x0c00,0x1800,0x1800,
		0x1800,0x1800,0x1800,0x0c00,
		0x0c00,0x0600,0x0300,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ) 41
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0c00,0x0600,0x0600,
		0x0600,0x0600,0x0600,0x0c00,
		0x0c00,0x1800,0x3000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR * 42
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x3300,0x3300,0x1e00,
		0x7f80,0x1e00,0x3300,0x3300,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR + 43
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0c00,0x0c00,0x0c00,
		0x7f80,0x0c00,0x0c00,0x0c00,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR , 44
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0e00,0x0e00,0x1800,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR - 45
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x7f80,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR . 46
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0e00,0x0e00,0x0e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR / 47
	{
		0x0000,0x0000,0x0000,0x0180,
		0x0180,0x0300,0x0300,0x0600,
		0x0600,0x0c00,0x0c00,0x1800,
		0x1800,0x3000,0x3000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 0 48
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x3300,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x3300,
		0x3300,0x1e00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 1 49
	{
		0x0000,0x0000,0x0c00,0x1c00,
		0x3c00,0x6c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 2 50
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x0180,0x0180,
		0x0300,0x0e00,0x1800,0x3000,
		0x6000,0x6000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 3 51
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x0180,0x0300,
		0x0e00,0x0300,0x0180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 4 52
	{
		0x0000,0x0000,0x0100,0x0300,
		0x0700,0x0f00,0x1b00,0x3300,
		0x6300,0x6300,0x7f80,0x0300,
		0x0300,0x0300,0x0300,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 5 53
	{
		0x0000,0x0000,0x7f80,0x6000,
		0x6000,0x6000,0x6000,0x6e00,
		0x7300,0x0180,0x0180,0x0180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 6 54
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6100,0x6000,0x6000,0x6e00,
		0x7300,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 7 55
	{
		0x0000,0x0000,0x7f80,0x0180,
		0x0180,0x0300,0x0300,0x0600,
		0x0600,0x0c00,0x0c00,0x1800,
		0x1800,0x3000,0x3000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 8 56
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x3300,
		0x1e00,0x3300,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 9 57
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x6180,
		0x3380,0x1d80,0x0180,0x0180,
		0x2180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR : 58
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0e00,0x0e00,0x0000,
		0x0000,0x0000,0x0000,0x0e00,
		0x0e00,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ; 59
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0e00,0x0e00,0x0000,
		0x0000,0x0000,0x0000,0x0e00,
		0x0e00,0x1c00,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR < 60
	{
		0x0000,0x0000,0x0100,0x0300,
		0x0600,0x0c00,0x1800,0x3000,
		0x6000,0x3000,0x1800,0x0c00,
		0x0600,0x0300,0x0100,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR = 61
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x7f80,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR > 62
	{
		0x0000,0x0000,0x2000,0x3000,
		0x1800,0x0c00,0x0600,0x0300,
		0x0180,0x0300,0x0600,0x0c00,
		0x1800,0x3000,0x2000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ? 63
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x0300,
		0x0600,0x0c00,0x0c00,0x0c00,
		0x0000,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR @ 64
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6780,0x6f80,0x6d80,
		0x6d80,0x6d80,0x6f00,0x6600,
		0x6000,0x3180,0x1f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR A 65
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x3300,0x6180,0x6180,
		0x6180,0x7f80,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR B 66
	{
		0x0000,0x0000,0x7c00,0x6600,
		0x6300,0x6300,0x6300,0x6600,
		0x7e00,0x6300,0x6180,0x6180,
		0x6180,0x6300,0x7e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR C 67
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6000,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x6000,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR D 68
	{
		0x0000,0x0000,0x7e00,0x6300,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x6300,0x7e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR E 69
	{
		0x0000,0x0000,0x7f80,0x6000,
		0x6000,0x6000,0x6000,0x6000,
		0x7e00,0x6000,0x6000,0x6000,
		0x6000,0x6000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR F 70
	{
		0x0000,0x0000,0x7f80,0x6000,
		0x6000,0x6000,0x6000,0x6000,
		0x7e00,0x6000,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR G 71
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6000,0x6000,0x6000,
		0x6780,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1e80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR H 72
	{
		0x0000,0x0000,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x7f80,0x6180,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR I 73
	{
		0x0000,0x0000,0x7f80,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR J 74
	{
		0x0000,0x0000,0x0f80,0x0180,
		0x0180,0x0180,0x0180,0x0180,
		0x0180,0x0180,0x0180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR K 75
	{
		0x0000,0x0000,0x6180,0x6180,
		0x6300,0x6300,0x6600,0x6600,
		0x7c00,0x6600,0x6600,0x6300,
		0x6300,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR L 76
	{
		0x0000,0x0000,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x6000,
		0x6000,0x6000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR M 77
	{
		0x0000,0x0000,0x6180,0x6180,
		0x7380,0x7380,0x7f80,0x6d80,
		0x6d80,0x6d80,0x6d80,0x6180,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR N 78
	{
		0x0000,0x0000,0x6180,0x7180,
		0x7180,0x7980,0x7980,0x6d80,
		0x6d80,0x6780,0x6780,0x6380,
		0x6380,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR O 79
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR P 80
	{
		0x0000,0x0000,0x7e00,0x6300,
		0x6180,0x6180,0x6180,0x6180,
		0x6300,0x7e00,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Q 81
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6d80,
		0x6780,0x3300,0x1f00,0x0180,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR R 82
	{
		0x0000,0x0000,0x7e00,0x6300,
		0x6180,0x6180,0x6180,0x6180,
		0x6300,0x7e00,0x6600,0x6300,
		0x6300,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR S 83
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6000,0x6000,0x3000,
		0x1e00,0x0300,0x0180,0x0180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR T 84
	{
		0x0000,0x0000,0x7f80,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR U 85
	{
		0x0000,0x0000,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR V 86
	{
		0x0000,0x0000,0x6180,0x6180,
		0x6180,0x6180,0x3300,0x3300,
		0x3300,0x1e00,0x1e00,0x1e00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR W 87
	{
		0x0000,0x0000,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6d80,
		0x6d80,0x6d80,0x6d80,0x7380,
		0x7380,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR X 88
	{
		0x0000,0x0000,0x6180,0x6180,
		0x3300,0x3300,0x1e00,0x1e00,
		0x0c00,0x1e00,0x1e00,0x3300,
		0x3300,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Y 89
	{
		0x0000,0x0000,0x6180,0x6180,
		0x3300,0x3300,0x1e00,0x1e00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Z 90
	{
		0x0000,0x0000,0x7f80,0x0180,
		0x0180,0x0300,0x0600,0x0600,
		0x0c00,0x1800,0x1800,0x3000,
		0x6000,0x6000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR [ 91
	{
		0x0000,0x0000,0x3f00,0x3000,
		0x3000,0x3000,0x3000,0x3000,
		0x3000,0x3000,0x3000,0x3000,
		0x3000,0x3000,0x3f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR BackSlash 92
	{
		0x0000,0x0000,0x0000,0x3000,
		0x3000,0x1800,0x1800,0x0c00,
		0x0c00,0x0600,0x0600,0x0300,
		0x0300,0x0180,0x0180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ] 93
	{
		0x0000,0x0000,0x3f00,0x0300,
		0x0300,0x0300,0x0300,0x0300,
		0x0300,0x0300,0x0300,0x0300,
		0x0300,0x0300,0x3f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ^ 94
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x6180,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR _ 95
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x7fc0,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ` 96
	{
		0x0000,0x0000,0x3c00,0x1c00,
		0x0600,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR a  97
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x1f00,
		0x3180,0x0180,0x3f80,0x6180,
		0x6180,0x6180,0x3e80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR b 98
	{
		0x0000,0x0000,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x6e00,
		0x7300,0x6180,0x6180,0x6180,
		0x6180,0x7300,0x6e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR c 99
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x1f00,
		0x3180,0x6000,0x6000,0x6000,
		0x6000,0x3180,0x1f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR d 100
	{
		0x0000,0x0000,0x0180,0x0180,
		0x0180,0x0180,0x0180,0x1d80,
		0x3380,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR e 101
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x7f80,0x6000,
		0x6000,0x3180,0x1f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR f 102
	{
		0x0000,0x0000,0x0f00,0x1980,
		0x1980,0x1800,0x1800,0x1800,
		0x1800,0x7e00,0x1800,0x1800,
		0x1800,0x1800,0x1800,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR g 103
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x3e80,
		0x6380,0x6300,0x6300,0x6300,
		0x3e00,0x6000,0x3f00,0x6180,
		0x6180,0x6180,0x3f00,0x0000,
	},
	//STARTCHAR h 104
	{
		0x0000,0x0000,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x6e00,
		0x7300,0x6180,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR i 105
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0c00,0x0c00,0x0000,0x3c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR j 106
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0180,0x0180,0x0000,0x0780,
		0x0180,0x0180,0x0180,0x0180,
		0x0180,0x0180,0x0180,0x3180,
		0x3180,0x3180,0x1f00,0x0000,
	},
	//STARTCHAR k 107
	{
		0x0000,0x0000,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x6300,
		0x6600,0x6c00,0x7800,0x7c00,
		0x6600,0x6300,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR l 108
	{
		0x0000,0x0000,0x3c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR m 109
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x5b00,
		0x7f80,0x6d80,0x6d80,0x6d80,
		0x6d80,0x6d80,0x6d80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR n 110
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x6e00,
		0x7300,0x6180,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR o 111
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR p 112
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x6e00,
		0x7300,0x6180,0x6180,0x6180,
		0x6180,0x7300,0x6e00,0x6000,
		0x6000,0x6000,0x6000,0x0000,
	},
	//STARTCHAR q 113
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x1d80,
		0x3380,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0180,
		0x0180,0x0180,0x0180,0x0000,
	},
	//STARTCHAR r 114
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x6f00,
		0x3980,0x3000,0x3000,0x3000,
		0x3000,0x3000,0x3000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR s 115
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x3f00,
		0x6180,0x6000,0x3f00,0x0180,
		0x0180,0x6180,0x3f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR t 116
	{
		0x0000,0x0000,0x0000,0x0000,
		0x1800,0x1800,0x1800,0x7e00,
		0x1800,0x1800,0x1800,0x1800,
		0x1800,0x1980,0x0f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR u 117
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR v 118
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x6180,
		0x6180,0x3300,0x3300,0x1e00,
		0x1e00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR w 119
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x6180,
		0x6180,0x6180,0x6d80,0x6d80,
		0x6d80,0x7f80,0x3300,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR x 120
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x6180,
		0x3300,0x1e00,0x0c00,0x0c00,
		0x1e00,0x3300,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR y 121
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0180,
		0x6180,0x3300,0x1e00,0x0000,
	},
	//STARTCHAR z 122
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x3f80,
		0x0180,0x0300,0x0600,0x0c00,
		0x1800,0x3000,0x3f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR { 123
	{
		0x0000,0x0000,0x0780,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x7800,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0780,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR bar 124
	{
		0x0000,0x0000,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR } 125
	{
		0x0000,0x0000,0x7800,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0780,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7800,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ~ 126
	{
		0x0000,0x0000,0x3980,0x6d80,
		0x6700,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR C177 127
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR C240 128
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR exclamdown 129
	{
		0x0000,0x0000,0x0c00,0x0c00,
		0x0000,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR cent 130
	{
		0x0000,0x0000,0x0000,0x0c00,
		0x0c00,0x1e00,0x3300,0x6100,
		0x6000,0x6000,0x6100,0x3300,
		0x1e00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR sterling 131
	{
		0x0000,0x0000,0x0000,0x0f00,
		0x1980,0x1980,0x1800,0x1800,
		0x7e00,0x1800,0x1800,0x1800,
		0x7c00,0x56c0,0x7380,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR currency 132
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x4040,0x2e80,0x1f00,
		0x3180,0x3180,0x3180,0x1f00,
		0x2e80,0x4040,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR yen 133
	{
		0x0000,0x0000,0x0000,0x0000,
		0x4080,0x6180,0x3300,0x1e00,
		0x3f00,0x0c00,0x3f00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR brokenbar 134
	{
		0x0000,0x0000,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR section 135
	{
		0x0000,0x0000,0x3e00,0x6300,
		0x6000,0x7000,0x7800,0x4c00,
		0x6600,0x3300,0x1900,0x0f00,
		0x0300,0x6300,0x3e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR dieresis 136
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR copyright 137
	{
		0x0000,0x0000,0x0000,0x0000,
		0x1e00,0x3300,0x6180,0x5e80,
		0x5280,0x5080,0x5280,0x5e80,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ordfeminine 138
	{
		0x0000,0x0000,0x1f00,0x2180,
		0x0180,0x3f80,0x6180,0x6180,
		0x3e80,0x0000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR guillmotleft 139
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0480,0x0d80,0x1b00,0x3600,
		0x6c00,0xd800,0x6c00,0x3600,
		0x1b00,0x0d80,0x0480,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR logicalnot 140
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x7f80,
		0x7f80,0x0180,0x0180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR hyphen 141
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x3f00,
		0x3f00,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR registered 142
	{
		0x0000,0x0000,0x0000,0x0000,
		0x1e00,0x3300,0x6180,0x5e80,
		0x5280,0x5e80,0x5480,0x5680,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR macron 143
	{
		0x0000,0x0000,0x0000,0x7f00,
		0x7f00,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR degree 144
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x3300,0x1e00,0x0c00,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR plusminus 145
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0c00,0x0c00,0x7f80,0x7f80,
		0x0c00,0x0c00,0x0000,0x7f80,
		0x7f80,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR twosuperior 146
	{
		0x0000,0x0000,0x1c00,0x3600,
		0x0600,0x0c00,0x1800,0x3000,
		0x3e00,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR threesuperior 147
	{
		0x0000,0x0000,0x1c00,0x3600,
		0x0200,0x0e00,0x0200,0x3600,
		0x1c00,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR acute 148
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR mu 149
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x6300,0x6300,0x6300,0x6300,
		0x6300,0x7700,0x7d00,0x6000,
		0x6000,0x6000,0x0000,0x0000,
	},
	//STARTCHAR paragraph 150
	{
		0x0000,0x0000,0x1f80,0x3f80,
		0x7d80,0x7d80,0x7d80,0x3d80,
		0x1d80,0x0580,0x0580,0x0580,
		0x0580,0x0580,0x0580,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR periodcentered 151
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0e00,
		0x0e00,0x0e00,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR cedilla 152
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0c00,
		0x0400,0x1200,0x0c00,0x0000,
	},
	//STARTCHAR onesuperior 153
	{
		0x0000,0x0000,0x1800,0x3800,
		0x1800,0x1800,0x1800,0x3c00,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ordmasculine 154
	{
		0x0000,0x0000,0x1c00,0x3600,
		0x6300,0x6300,0x6300,0x3600,
		0x1c00,0x0000,0x7f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR guillemotright 155
	{
		0x0000,0x0000,0x0000,0x0000,
		0x4800,0x6c00,0x3600,0x1b00,
		0x0d80,0x06c0,0x0d80,0x1b00,
		0x3600,0x6c00,0x4800,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR onequarter 156
	{
		0x0000,0x0000,0x2000,0x6000,
		0x2080,0x2100,0x7200,0x0400,
		0x0900,0x1300,0x2500,0x4f00,
		0x0100,0x0100,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR onehalf 157
	{
		0x0000,0x0000,0x2000,0x6000,
		0x2080,0x2100,0x7200,0x0400,
		0x0b00,0x1480,0x2080,0x4100,
		0x0200,0x0780,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR threequarters 158
	{
		0x0000,0x0000,0x7000,0x0800,
		0x3080,0x0900,0x7200,0x0400,
		0x0900,0x1300,0x2500,0x4f80,
		0x0100,0x0100,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR questiondown 159
	{
		0x0000,0x0000,0x0c00,0x0c00,
		0x0000,0x0c00,0x0c00,0x0c00,
		0x1800,0x3000,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Agrave 160
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x0c00,0x1e00,
		0x3300,0x6180,0x6180,0x7f80,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Aacute 161
	{
		0x0000,0x0000,0x0300,0x0600,
		0x0c00,0x0000,0x0c00,0x1e00,
		0x3300,0x6180,0x6180,0x7f80,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Acircumflex 162
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x0c00,0x1e00,
		0x3300,0x6180,0x6180,0x7f80,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Atilde 163
	{
		0x0000,0x0000,0x1900,0x3f00,
		0x2600,0x0000,0x0c00,0x1e00,
		0x3300,0x6180,0x6180,0x7f80,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Adieresis 164
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x6180,0x6180,0x7f80,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Aring 165
	{
		0x0000,0x0000,0x0c00,0x1200,
		0x1200,0x0c00,0x0c00,0x1e00,
		0x3300,0x6180,0x6180,0x7f80,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR AE 166
	{
		0x0000,0x0000,0x0f80,0x1e00,
		0x3600,0x3600,0x6600,0x6600,
		0x7f80,0x6600,0x6600,0x6600,
		0x6600,0x6600,0x6780,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Ccedilla 167
	{
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6000,0x6000,0x6000,
		0x6000,0x6000,0x6000,0x6000,
		0x6180,0x3300,0x1e00,0x0c00,
		0x0400,0x1200,0x0c00,0x0000,
	},
	//STARTCHAR Egrave 168
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x7f80,0x6000,
		0x6000,0x6000,0x7e00,0x6000,
		0x6000,0x6000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Eacute 169
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x7f80,0x6000,
		0x6000,0x6000,0x7e00,0x6000,
		0x6000,0x6000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Ecircumflex 170
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x7f80,0x6000,
		0x6000,0x6000,0x7e00,0x6000,
		0x6000,0x6000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Edieresis 171
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x7f80,0x6000,
		0x6000,0x6000,0x7e00,0x6000,
		0x6000,0x6000,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Igrave 172
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x3f00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x3f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Iacute 173
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x3f00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x3f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Icircumflex 174
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x3f00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x3f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Idieresis 175
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x3f00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x3f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Eth 176
	{
		0x0000,0x0000,0x7e00,0x6300,
		0x6180,0x6180,0x6180,0x6180,
		0xf980,0x6180,0x6180,0x6180,
		0x6180,0x6300,0x7e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Ntilde 177
	{
		0x0000,0x0000,0x1900,0x3f00,
		0x2600,0x0000,0x4180,0x6180,
		0x7180,0x7980,0x7d80,0x6f80,
		0x6780,0x6380,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Ograve 178
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Oacute 179
	{
		0x0000,0x0000,0x0300,0x0600,
		0x0c00,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Ocircumflex 180
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Otilde 181
	{
		0x0000,0x0000,0x1900,0x3f00,
		0x2600,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Odieresis 182
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x1e00,0x3300,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR multiply 183
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x2080,
		0x3180,0x1b00,0x0e00,0x0e00,
		0x1b00,0x3180,0x2080,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Oslash 184
	{
		0x0000,0x0080,0x1f00,0x3300,
		0x6380,0x6380,0x6580,0x6580,
		0x6580,0x6980,0x6980,0x6980,
		0x7180,0x3300,0x3e00,0x4000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Ugrave 185
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Uacute 186
	{
		0x0000,0x0000,0x0300,0x0600,
		0x0c00,0x0000,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Ucircumflex 187
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Udieresis 188
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Yacute 189
	{
		0x0000,0x0000,0x0300,0x0600,
		0x0c00,0x0000,0x4080,0x6180,
		0x3300,0x1e00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x0c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR Thorn 190
	{
		0x0000,0x0000,0x0000,0x0000,
		0x3c00,0x1800,0x1f00,0x1980,
		0x1980,0x1980,0x1f00,0x1800,
		0x1800,0x1800,0x3c00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR germandbls 191
	{
		0x0000,0x0000,0x0000,0x1c00,
		0x3e00,0x7300,0x6300,0x6300,
		0x6600,0x6c00,0x6600,0x6300,
		0x6100,0x6300,0x6e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR agave 192
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x0000,0x3f00,
		0x6180,0x0180,0x3f80,0x6180,
		0x6180,0x6180,0x3e80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR aacute 193
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x0000,0x3f00,
		0x6180,0x0180,0x3f80,0x6180,
		0x6180,0x6180,0x3e80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR acircumflex 194
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x0000,0x3f00,
		0x6180,0x0180,0x3f80,0x6180,
		0x6180,0x6180,0x3e80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR atilde 195
	{
		0x0000,0x0000,0x1900,0x3f00,
		0x2600,0x0000,0x0000,0x3f00,
		0x6180,0x0180,0x3f80,0x6180,
		0x6180,0x6180,0x3e80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR adieresis 196
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x0000,0x3f00,
		0x6180,0x0180,0x3f80,0x6180,
		0x6180,0x6180,0x3e80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR aring 197
	{
		0x0000,0x0000,0x0000,0x0c00,
		0x1200,0x1200,0x0c00,0x3f00,
		0x6180,0x0180,0x3f80,0x6180,
		0x6180,0x6180,0x3e80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ae 198
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x3b00,
		0x4d80,0x0d80,0x0f00,0x3c00,
		0x6c00,0x6c80,0x3700,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR 0xccedilla 199
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x1f00,
		0x3180,0x6000,0x6000,0x6000,
		0x6000,0x3180,0x1f00,0x0c00,
		0x0400,0x1200,0x0c00,0x0000,
	},
	//STARTCHAR egrave 200
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x7f80,0x6000,
		0x6000,0x3180,0x1f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR eacute 201
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x7f80,0x6000,
		0x6000,0x3180,0x1f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ecircumflex 202
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x7f80,0x6000,
		0x6000,0x3180,0x1f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR edieresis 203
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x7f80,0x6000,
		0x6000,0x3180,0x1f00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR igrave 204
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x0000,0x3c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR iacute 205
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x0000,0x3c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR icircumflex 206
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x0000,0x3c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR idieresis 207
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x0000,0x3c00,
		0x0c00,0x0c00,0x0c00,0x0c00,
		0x0c00,0x0c00,0x7f80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR eth 208
	{
		0x0000,0x0000,0x4400,0x6c00,
		0x3800,0x3800,0x6c00,0x4600,
		0x1f00,0x3380,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ntilde 209
	{
		0x0000,0x0000,0x1900,0x3f00,
		0x2600,0x0000,0x0000,0x6e00,
		0x7300,0x6180,0x6180,0x6180,
		0x6180,0x6180,0x6180,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ograve 210
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR oacute 211
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ocircumflex 212
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR otilde 213
	{
		0x0000,0x0000,0x1900,0x3f00,
		0x2600,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR odieresis 214
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x0000,0x1e00,
		0x3300,0x6180,0x6180,0x6180,
		0x6180,0x3300,0x1e00,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR divide 215
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0c00,0x0c00,0x0000,0x0000,
		0x7f80,0x7f80,0x0000,0x0000,
		0x0c00,0x0c00,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR oslash 216
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0080,0x1f00,
		0x3300,0x6580,0x6580,0x6980,
		0x6980,0x3300,0x3e00,0x4000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ugrave 217
	{
		0x0000,0x0000,0x3000,0x1800,
		0x0c00,0x0000,0x0000,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR uacute 218
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x0000,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ucircumflex 219
	{
		0x0000,0x0000,0x0c00,0x1e00,
		0x3300,0x0000,0x0000,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR udieresis 220
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x0000,0x6180,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR yacute 221
	{
		0x0000,0x0000,0x0600,0x0c00,
		0x1800,0x0000,0x0000,0x0000,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0180,
		0x6180,0x3300,0x1e00,0x0000,
	},
	//STARTCHAR thorn 222
	{
		0x0000,0x0000,0x0000,0x0000,
		0x0000,0x0000,0x0000,0x3800,
		0x1e00,0x1b00,0x1b00,0x1e00,
		0x1800,0x1800,0x3800,0x0000,
		0x0000,0x0000,0x0000,0x0000,
	},
	//STARTCHAR ydieresis 223
	{
		0x0000,0x0000,0x3300,0x3300,
		0x0000,0x0000,0x0000,0x0000,
		0x6180,0x6180,0x6180,0x6180,
		0x6180,0x3380,0x1d80,0x0180,
		0x6180,0x3300,0x1e00,0x0000,
	}
};// Hi 10 bits active per short


const unsigned long DDigit_Cmap_RGB[]={
	0XA9A9A9,0X1E90FF,0XFF4500,0XDA70D6,
	0X00FF00,0X7FFFD4,0XFFFF00,0XFFFFFF,
	0XC0C0C0,0X6495ED,0XFFA500,0XDDA0DD,
	0X7FFF00,0XB0E0E6,0XFFD700,0XDCDCDC
};

const unsigned long DDigit_Cmap_YUV[]={
	0XA18080,0X79C246,0X7446D7,0X959DA7,
	0X913622,0XC6804B,0XD21092,0XEB8080,
	0XB58080,0X8CAE64,0XA52AB3,0XAF9296,
	0XB1235A,0XC58A6A,0XBE1CA1,0XCD8080
};

void __stdcall DDigitS(const VideoInfo &vi,PVideoFrame &dst, int x, int y, int color, \
					  const bool pix,const bool vert,const char *s)
{	// Print EXT ASCII string @ [x,y] pixel or character coords, by color[16] index
	// pix==true = pixel coords: vert==true = Vertical (Top Down)

	if(color == DDIGIT_DEFAULT)
		color=DDIGIT_INDEX_TO_USE_AS_DEFAULT;
	else if(color == DDIGIT_HILITE)
		color=DDIGIT_INDEX_TO_USE_AS_HILITE;
	else if(color < 0 || color >= DDIGIT_CMAP_NELS)
		return;

	int col;
	if (vi.IsRGB())
		col=DDigit_Cmap_RGB[color];
	else
		col=DDigit_Cmap_YUV[color];

	const int c3=col & 0xFF;	col>>=8;
	const int c2=col & 0xFF;	col>>=8;
	const int c1=col & 0xFF;

	const int rowsize= dst->GetRowSize(PLANAR_Y);
	const int pitch  = dst->GetPitch(PLANAR_Y);
	const int height = dst->GetHeight(PLANAR_Y);
	
	const int CharStepX = (vert) ? 0 : DDIGIT_CHAR_WIDTH;	// Vertical ?
	const int CharStepY = (vert) ? DDIGIT_CHAR_HEIGHT : 0;

	if(!pix) {						// Convert To Character coords
		x *=DDIGIT_CHAR_WIDTH;
		y *=DDIGIT_CHAR_HEIGHT;
	}

	int num;

	if (vi.IsPlanar()) {
	#ifdef DDIGIT_ENABLE_SUPPORT_PLANAR

		int pitchUV;
		int heightUV;
		int xSubS;
		int ySubS;

		const int rowsizeUV= dst->GetRowSize(PLANAR_U);

		if(rowsizeUV) {
			pitchUV  = dst->GetPitch(PLANAR_U);
			heightUV = dst->GetHeight(PLANAR_U);
			xSubS = rowsize / rowsizeUV;
			ySubS = height  / heightUV;
		}
		for (; num=*s ; x+=CharStepX,y+=CharStepY,s++) {
			num = (num-' ') & 0xFF;	;	// Conv font ix, Ensure +ve char
			if(num >= DDIGIT_CHARACTERS)
				num=0;					// Not in font, Convert to SPACE

			unsigned char *dpY = &dst->GetWritePtr(PLANAR_Y)[y * pitch];
			for (int tyy = 0; tyy < DDIGIT_CHAR_HEIGHT; dpY += pitch, tyy++) {
				if((y+tyy >= 0)&&(y+tyy < height)) {
					unsigned short fbm=DDigitFont[num][tyy];
					unsigned char* rp = &dpY[x];
					for (int tx = 0; tx < DDIGIT_CHAR_WIDTH; fbm<<=1U,++rp, ++tx) {
						if((x+tx >= 0) && (x+tx < rowsize)) {
							if (fbm & 0x8000U) { // Character Foreground SET Pixel ?
								*rp = c1; 		 // Set Luma Foreground Pixel
							} else {
								*rp=(unsigned char)(((*rp-16)*7)>>3)+16;// Background, Luma*=7/8
							}
						}
					}
				}	
			}

			if(rowsizeUV) {
				unsigned char *dpU = dst->GetWritePtr(PLANAR_U);
				unsigned char *dpV = dst->GetWritePtr(PLANAR_V);
				for (int tcy = 0; tcy < DDIGIT_CHAR_HEIGHT; tcy++) {
					if((y+tcy >=0) && ((y+tcy)/ySubS < heightUV)) {
						unsigned short fbm=DDigitFont[num][tcy];
						for (int tx = 0; tx < DDIGIT_CHAR_WIDTH; fbm<<=1U, tx++) {
							if((x+tx >=0)&&((x+tx)/xSubS < rowsizeUV)) {
								unsigned char* rpu = &dpU[((x+tx)/xSubS)+((y+tcy)/ySubS  * pitchUV)];
								unsigned char* rpv = &dpV[((x+tx)/xSubS)+((y+tcy)/ySubS  * pitchUV)];
								if (fbm & 0x8000U) { // Character Foreground SET Pixel ?
									*rpu = c2;
									*rpv = c3;
								} else {				// Character Background
									*rpu = (unsigned char) (((*rpu-128)*7)>>3)+128;
									*rpv = (unsigned char) (((*rpv-128)*7)>>3)+128;
								}
							}
						}
					}
				}
			}
		}
	#endif
	} else if (vi.IsYUY2()) {
	#ifdef DDIGIT_ENABLE_SUPPORT_YUY2
		for (; num=*s ; x+=CharStepX,y+=CharStepY,s++) {
			num = (num-' ') & 0xFF;	;	// Conv font ix, Ensure +ve char, (ext ascii never worked)
			if(num >= DDIGIT_CHARACTERS)
				num=0;					// Not in font, Convert to SPACE
			unsigned char *dp = &dst->GetWritePtr()[y * pitch];
			for (int ty = 0; ty < DDIGIT_CHAR_HEIGHT; dp += pitch, ty++) {
				if((y + ty >= 0) && (y + ty < height)) {
					unsigned short fbm=DDigitFont[num][ty];
					unsigned char* rp = &dp[x * 2];
					for (int tx = 0; tx < DDIGIT_CHAR_WIDTH; fbm<<=1U,rp+=2, tx++) {
						if((x+tx >=0)&&((x+tx)*2 < rowsize)) {
							if (fbm & 0x8000U) {	// Character Foreground SET Pixel ?
								if ((x+tx) & 1) {					// ODD [YUYV]
									rp[0] = c1;						// Hi Luma
									rp[-1]= c2;						// u 
									rp[1] = c3;						// v
								} else {							// EVEN [YUYV]
									rp[0] = c1;						// Hi Luma
									rp[1] = c2;						// u
									rp[3] = c3;						// v
								}
							} else {
								if ((x+tx) & 1) {					// ODD [YUYV]
									rp[0] = (unsigned char) (((rp[0]-16)*7)>>3)+16;// Luma *=7/8
									rp[-1]= (unsigned char) (((rp[-1]-128)*7)>>3)+128; // Chroma *=7/8
									rp[1] = (unsigned char) (((rp[1]-128)*7)>>3)+128;  // Chroma *=7/8
								} else {							// EVEN [YUYV]
									rp[0] = (unsigned char) (((rp[0]-16)*7)>> 3)+16;// Luma * 7/8
									rp[1] = (unsigned char) (((rp[1]-128)*7)>>3)+128; // Chroma *=7/8
									rp[3] = (unsigned char) (((rp[3]-128)*7)>>3)+128; // Chroma *=7/8
								}
							}
						}
					}
				}
			}
		}
	#endif
	} else if (vi.IsRGB()) {
	#ifdef DDIGIT_ENABLE_SUPPORT_RGB
		const int step=(vi.IsRGB32())?4:3;
		for (; num=*s ; x+=CharStepX,y+=CharStepY,s++) {
			num = (num-' ') & 0xFF;	;	// Conv font ix, Ensure +ve char
			if(num >= DDIGIT_CHARACTERS)
				num=0;					// Not in font, Convert to SPACE

			unsigned char *dp = &dst->GetWritePtr()[(height-1-y)  * pitch];
			for (int ty = 0; ty < DDIGIT_CHAR_HEIGHT; dp -= pitch, ty++) {
				if((y+ty >= 0)&&(y+ty < height)) {
					unsigned short fbm=DDigitFont[num][ty];
					unsigned char* rp = &dp[x*step];
					for (int tx = 0; tx < DDIGIT_CHAR_WIDTH; fbm<<=1U,rp+=step, ++tx) {
						if((x+tx >= 0) && ((x+tx)*step < rowsize)) {
							if (fbm & 0x8000U) {	// Character Foreground SET Pixel ?
								*rp   = c3;	// B
								rp[1] = c2; // G
								rp[2] = c1; // R
							} else {
								*rp   = (unsigned char) ((*rp   * 7) >> 3); // *=7/8
								rp[1] = (unsigned char) ((rp[1] * 7) >> 3);
								rp[2] = (unsigned char) ((rp[2] * 7) >> 3);
							}
						}
					}
				}
			}
		}
	#endif
	}
}	

#ifdef DDIGIT_INCLUDE_DRAWSTRING_FUNCTIONS
	// Draw Strings at pixel Coords
	void __stdcall DrawString(const VideoInfo &vi,PVideoFrame &dst,int x,int y,int color,const char *s) {
		DDigitS(vi,dst, x, y, color ,true,false, s);// color is an index
	}

	void __stdcall DrawString(const VideoInfo &vi,PVideoFrame &dst, int x, int y,const char *s) {
		DDigitS(vi,dst,x,y,DDIGIT_DEFAULT,true,false,s); // No color, white
	}

	void __stdcall DrawString(const VideoInfo &vi,PVideoFrame &dst, int x, int y, bool hilite,const char *s) {
		DDigitS(vi,dst,x,y, (!hilite)?DDIGIT_DEFAULT:DDIGIT_HILITE,true,false,s); // Hi-liting
	}
#endif // DDIGIT_INCLUDE_DRAWSTRING_FUNCTIONS

#ifdef DDIGIT_INCLUDE_DRAWSTRING_VERTICAL
	// Draw Vertical Strings at pixel Coords
	void __stdcall DrawStringV(const VideoInfo &vi,PVideoFrame &dst,int x,int y,int color,const char *s) {
		DDigitS(vi,dst, x, y, color ,true,true, s);// color is an index
	}

	void __stdcall DrawStringV(const VideoInfo &vi,PVideoFrame &dst, int x, int y,const char *s) {
		DDigitS(vi,dst,x,y,DDIGIT_DEFAULT,true,true,s); // No color, white
	}

	void __stdcall DrawStringV(const VideoInfo &vi,PVideoFrame &dst, int x, int y, bool hilite,const char *s) {
		DDigitS(vi,dst,x,y, (!hilite)?DDIGIT_DEFAULT:DDIGIT_HILITE,true,true,s); // Hi-liting
	}
#endif // DDIGIT_INCLUDE_DRAWSTRING_VERTICAL


#ifdef DDIGIT_INCLUDE_DRAWSTR_FUNCTIONS
	// Draw Strings at Character Coords
	void __stdcall DrawStr(const VideoInfo &vi,PVideoFrame &dst, int x, int y, int color, const char *s) {
		DDigitS(vi,dst, x, y, color ,false,false, s);// color is an index
	}

	void __stdcall DrawStr(const VideoInfo &vi,PVideoFrame &dst, int x, int y, const char *s) {
		DDigitS(vi,dst, x, y,DDIGIT_DEFAULT,false,false,s); // No color, white
	}

	void __stdcall DrawStr(const VideoInfo &vi,PVideoFrame &dst, int x, int y, bool hilite, const char *s) {
		DDigitS(vi,dst, x, y,(!hilite)?DDIGIT_DEFAULT:DDIGIT_HILITE,false,false,s); // Hi-liting
	}
#endif		// DDIGIT_INCLUDE_DRAWSTR_FUNCTIONS

#ifdef DDIGIT_INCLUDE_DRAWSTR_VERTICAL
	// Draw Vertical Strings at Character Coords
	void __stdcall DrawStrV(const VideoInfo &vi,PVideoFrame &dst, int x, int y, int color, const char *s) {
		DDigitS(vi,dst, x, y, color ,false,true, s);// color is an index
	}

	void __stdcall DrawStrV(const VideoInfo &vi,PVideoFrame &dst, int x, int y, const char *s) {
		DDigitS(vi,dst, x , y,DDIGIT_DEFAULT,false,true,s);// No color, white
	}

	void __stdcall DrawStrV(const VideoInfo &vi,PVideoFrame &dst,int x,int y,bool hilite,const char *s) {
		DDigitS(vi,dst,x,y,(!hilite)?DDIGIT_DEFAULT:DDIGIT_HILITE,false,true,s); // Hi-liting
	}
#endif	// DDIGIT_INCLUDE_DRAWSTR_VERTICAL
