//       1         2         3         4         5         6         7         8         9        10        11        12        13   
//3456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// $File: //AviSynth/Main/MVTools/Critical Section.hpp $
// $Revision: #1 $
// $DateTime: 2008/09/05 17:25:31 $
//
// Description: 
//     This is the header file for the critical section class.
// 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// only include header file once
#ifndef CRITICAL_SECTION_HEADER
#define CRITICAL_SECTION_HEADER

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <windows.h>

namespace ThreadFunctions {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define Critical Section class
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CriticalSection {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define member variables
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private:
	CRITICAL_SECTION m_CriticalSection; // the critical section object
	unsigned int m_NumLocks; //the number of locks on the critical section
    unsigned long m_SpinCount; // the spin count of the critical section

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define constructor/destructor functions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
	CriticalSection(unsigned long const SpinCount=4000);   // create critical section object  
	~CriticalSection();	 // delete critical section object
private:
	// prevent copying
	CriticalSection(CriticalSection const& cs); // copy constructor
	CriticalSection& operator=(CriticalSection const& cs); // assignment operator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define member access functions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
	bool IsLocked() const;
		// whether critical section is locked or not
	unsigned int NumLocks() const;
		// returns the number of locks
    unsigned long SpinCount() const;
        // returns the spin count of the critical section

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define member operations
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
	void Lock();
		// lock and enter the critical section
	void Unlock();
		// unlock and leave critical section
	bool TryLock();
		// try to lock and enter the critical section.  It returns true if successful.
    unsigned long SetSpinCount(unsigned long const SpinCount);
        // this function sets the spin count of the critical section and returns the old spin count
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define Critical Section Automatic class
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CriticalSectionAuto
{
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define member variables
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private:
	CriticalSection& m_CriticalSection; // the critical section class reference

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define constructor/destructor  functions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
	explicit CriticalSectionAuto(CriticalSection &cs) : m_CriticalSection(cs) {m_CriticalSection.Lock();}
        // create an automatic class which locks the resource on construction and unlocks the resource on destruction
	~CriticalSectionAuto() {m_CriticalSection.Unlock();}	// unlock critical section
private:
	// prevent copying
	CriticalSectionAuto(CriticalSectionAuto const& cs); // copy constructor
	CriticalSectionAuto& operator=(CriticalSectionAuto const& cs); // assignment operator
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define member operations
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
    bool TryLock() {return m_CriticalSection.TryLock();}
		// try to lock and enter the critical section.  It returns true if successful.

};


}; // end namespace

#endif


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//3456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012
//       1         2        3         4         5         6         7         8         9        10        11        12        13   