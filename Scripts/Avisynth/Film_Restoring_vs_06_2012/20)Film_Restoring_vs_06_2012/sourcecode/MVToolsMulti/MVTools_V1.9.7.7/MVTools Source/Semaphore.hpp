//       1         2         3         4         5         6         7         8         9        10        11        12        13   
//3456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// $File: //AviSynth/Main/MVTools/Semaphore.hpp $
// $Revision: #1 $
// $DateTime: 2008/09/05 17:25:31 $
//
// Description: 
//     This is the header file for the semaphore class.
// 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// only include header file once
#ifndef SEMAPHORE_HEADER
#define SEMAPHORE_HEADER

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <windows.h>

namespace ThreadFunctions {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define Semaphore class
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Semaphore {

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define eunermations
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
    enum WaitResult {WaitSignaled, WaitTimeout, WaitFailed};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define member variables
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private:
	HANDLE m_Semaphore; // the critical section object

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define constructor/destructor functions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
	explicit Semaphore(const char* const Name, long const MaximumCount, long const InitialCount=0, 
                       SECURITY_ATTRIBUTES* pSemaphoreAttributes=0);
		// create sempahore taking maximum count, initial count and semaphore attributes
	~Semaphore();	// delete semaphore
private:
	// prevent copying
	Semaphore(Semaphore const& cs); // copy constructor
	Semaphore& operator=(Semaphore const& cs); // assignment operator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define member access functions
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
	HANDLE Handle() const; // returns a handle to the semaphore

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define member operations 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
	bool Release(long const Count=1) const;
		// release the semaphore with Count increment amount
    WaitResult Semaphore::Wait(unsigned long const Milliseconds=INFINITE);
        // wait for semaphore to be signaled for milliseconds time.  It returnes the result of the wait.
};

// end namespace
};

#endif


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//3456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012
//       1         2        3         4         5         6         7         8         9        10        11        12        13   